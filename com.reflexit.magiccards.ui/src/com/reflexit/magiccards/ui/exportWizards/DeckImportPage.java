package com.reflexit.magiccards.ui.exportWizards;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.layout.GridDataFactory;
import org.eclipse.jface.layout.GridLayoutFactory;
import org.eclipse.jface.operation.IRunnableContext;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceStore;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.window.Window;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.dnd.Clipboard;
import org.eclipse.swt.dnd.TextTransfer;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbenchWizard;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.forms.events.HyperlinkAdapter;
import org.eclipse.ui.forms.events.HyperlinkEvent;
import org.eclipse.ui.forms.widgets.Hyperlink;

import com.reflexit.magiccards.core.DataManager;
import com.reflexit.magiccards.core.FileUtils;
import com.reflexit.magiccards.core.MagicException;
import com.reflexit.magiccards.core.exports.IImportDelegate;
import com.reflexit.magiccards.core.exports.ImportData;
import com.reflexit.magiccards.core.exports.ImportExportFactory;
import com.reflexit.magiccards.core.exports.ImportUtils;
import com.reflexit.magiccards.core.exports.ReportType;
import com.reflexit.magiccards.core.model.IMagicCard;
import com.reflexit.magiccards.core.model.Location;
import com.reflexit.magiccards.core.model.nav.CardCollection;
import com.reflexit.magiccards.core.model.nav.CardElement;
import com.reflexit.magiccards.core.model.nav.CardOrganizer;
import com.reflexit.magiccards.core.model.nav.CollectionsContainer;
import com.reflexit.magiccards.core.model.storage.ICardStore;
import com.reflexit.magiccards.core.sync.WebUtils;
import com.reflexit.magiccards.ui.MagicUIActivator;
import com.reflexit.magiccards.ui.dialogs.CorrectSetDialog;
import com.reflexit.magiccards.ui.dialogs.LocationPickerDialog;
import com.reflexit.magiccards.ui.utils.CoreMonitorAdapter;
import com.reflexit.magiccards.ui.utils.WaitUtils;
import com.reflexit.magiccards.ui.widgets.MagicToolkit;

/**
 * First and only page of Deck Export Wizard
 */
public class DeckImportPage extends WizardDataTransferPage {
	private static final String IMPUT_FILE_SETTING = "outputFile"; //$NON-NLS-1$
	private static final String REPORT_TYPE_SETTING = "reportType"; //$NON-NLS-1$
	private static final String FROM_CHOICE = "from"; //$NON-NLS-1$
	private static final String AUTO_NAME = "<auto-generated-name>";
	private final String ID = getClass().getName();
	// ui elements
	private Button fileRadio;
	private Text fileText;
	private Button clipboardRadio;
	private Button inputRadio;
	private Combo typeCombo;
	private Button virtualCards;
	private Text deckText;
	private MagicToolkit toolkit;
	// data elements
	private PreferenceStore store;
	private InputChoice inputChoice;
	private CardElement element;
	private Collection<ReportType> types;
	private ImportData importData;
	private String fileName;
	private ReportType reportType;
	private Button urlRadio;
	private Text urlText;
	private String urlName;

	enum InputChoice {
		FILE, CLIPBOARD, INPUT, URL
	};

	protected DeckImportPage(final String pageName, final IStructuredSelection selection) {
		super(pageName);
		store = new PreferenceStore();
		types = ImportExportFactory.getImportTypes();
		if (selection != null && selection.getFirstElement() instanceof CardElement) {
			element = (CardElement) selection.getFirstElement();
		} else {
			element = getDefaultElement();
		}
		importData = new ImportData();
	}

	public void performImport(final boolean preview) {
		importData.setHeader(true);
		importData.setVirtual(virtualCards.getSelection());
		int choice = getIntoChoice();
		final boolean dbImport = choice == 3;
		try {
			IRunnableWithProgress work = new IRunnableWithProgress() {
				@Override
				public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
					importRunnable(preview, dbImport, monitor);
				}
			};
			getRunnableContext().run(true, true, work);
		} catch (InvocationTargetException ite) {
			Throwable e = ite.getCause();
			importData.setError(e);
			if (e instanceof RuntimeException && !(e instanceof MagicException))
				MagicUIActivator.log(e);
		} catch (InterruptedException e) {
			importData.setError(e);
		}
	}

	private boolean fixErrors(final Collection<IMagicCard> result, final boolean dbImport) {
		final boolean yesres[] = new boolean[] { true };
		getControl().getDisplay().syncExec(new Runnable() {
			@Override
			public void run() {
				int size = result.size();
				Map<String, String> badSets = ImportUtils.getSetCandidates(result);
				if (badSets.size() > 0) {
					boolean yes = MessageDialog.openQuestion(getShell(), "Import Error",
							"Cannot resolve " + badSets.size()
									+ " set(s). The following sets are not found or ambigues: " + badSets.keySet()
									+ ".\n Do you want to fix these?");
					if (yes) {
						// ask user to fix sets
						for (Iterator<String> iterator = badSets.keySet().iterator(); iterator.hasNext();) {
							String set = iterator.next();
							CorrectSetDialog dialog = new CorrectSetDialog(getShell(), set, badSets.get(set));
							if (dialog.open() == Window.OK) {
								String newSet = dialog.getSet();
								badSets.put(set, newSet);
							} else {
								break;
							}
						}
						// fix cards for these sets
						ImportUtils.fixSets(result, badSets);
					}
				}
				ArrayList<IMagicCard> newdbrecords = new ArrayList<IMagicCard>();
				ImportUtils.performPreImportWithDb(result, newdbrecords,
						reportType.getImportDelegate().getResult().getFields());
				ArrayList<String> lerrors = new ArrayList<String>();
				ImportUtils.validateDbRecords(newdbrecords, lerrors);
				if (newdbrecords.size() > 0 && lerrors.size() == 0) {
					boolean yes2 = dbImport;
					if (yes2 == false) {
						yes2 = MessageDialog.openQuestion(getShell(), "Import into DB", newdbrecords.size()
								+ " cards are not found in the database. Do you want to add new cards into database?");
					}
					if (yes2)
						ImportUtils.importIntoDb(newdbrecords);
				} else if (lerrors.size() > 0 && dbImport) {
					String message = newdbrecords.size() + " cards are not found in the database " + lerrors.size()
							+ "\nThe following errors preventing import all of them into database:\n";
					for (Iterator iterator = lerrors.iterator(); iterator.hasNext();) {
						String str = (String) iterator.next();
						message += str + "\n";
					}
					message += "Do you want to proceed with importing cards partually? No would abort the import into DB";
					boolean yes2 = MessageDialog.openQuestion(getShell(), "Import into DB", message);
					if (yes2)
						ImportUtils.importIntoDb(newdbrecords);
				}
				ArrayList<String> cerrors = new ArrayList<String>();
				ICardStore magicDb = DataManager.getCardHandler().getMagicDBStore();
				for (Iterator iterator = result.iterator(); iterator.hasNext();) {
					IMagicCard card = (IMagicCard) iterator.next();
					if (card.getCardId() == 0 || magicDb.getCard(card.getCardId()) == null) {
						iterator.remove();
						cerrors.add(card.getName() + " (" + card.getSet() + ")");
					}
				}
				if (cerrors.size() != 0) {
					String message = "After all this effort I cannot resolve " + cerrors.size() + " cards of " + size
							+ ":\n";
					int i = 0;
					for (Iterator iterator = cerrors.iterator(); iterator.hasNext() && i < 10; i++) {
						String str = (String) iterator.next();
						message += str + "\n";
					}
					if (i < cerrors.size()) {
						message += "... + " + (cerrors.size() - i) + " more\n";
						message += "Full error log can be found at <workspace>/.metadata/.log\n";
					}
					if (cerrors.size() >= size) {
						message += "No good cards to import :(";
						yesres[0] = false;
						MessageDialog.openError(getShell(), "Import", message);
					} else {
						message += "Do you want to proceed with importing cards partually? No would abort the import";
						yesres[0] = MessageDialog.openQuestion(getShell(), "Import", message);
					}
				}
			}
		});
		return yesres[0];
	}

	protected void createNewDeck(final String base, boolean virtual, CollectionsContainer resource) {
		String name = base;
		int attempts = 1000;
		while (resource.contains(name) && attempts-- > 0) {
			name = base + new Random().nextInt(1000);
		}
		if (attempts <= 0)
			throw new IllegalArgumentException("Cannot generate deck name");
		this.element = resource.addDeck(base + ".xml", virtual);
	}

	protected String getNewDeckName() {
		if (inputChoice != InputChoice.FILE) {
			return "imported";
		} else {
			String basename = new File(fileName).getName();
			int k = basename.lastIndexOf('.');
			if (k >= 0)
				basename = basename.substring(0, k);
			return basename;
		}
	}

	String readSource() throws IOException {
		String text = "";
		switch (inputChoice) {
		case FILE:
			text = FileUtils.readFileAsString(new File(fileName));
			importData.setText(text);
			break;
		case CLIPBOARD:
			text = getClipboardText();
			importData.setText(text);
			break;
		case INPUT:
			text = importData.getText();
			break;
		case URL:
			text = WebUtils.openUrlText(new URL(urlName));
			importData.setText(text);
			break;
		default:
			break;
		}
		return text;
	}

	public String getClipboardText() {
		String text[] = new String[] { "" };
		WaitUtils.syncExec(() -> {
			final Clipboard cb = new Clipboard(PlatformUI.getWorkbench().getDisplay());
			Object clipboardText = cb.getContents(TextTransfer.getInstance());
			if (clipboardText == null)
				clipboardText = "";
			text[0] = clipboardText.toString();
		});
		return text[0];
	}

	private CollectionsContainer getDefaultElement() {
		return DataManager.getInstance().getModelRoot().getDeckContainer();
	}

	private Location getSelectedLocation() {
		return getElement().getLocation();
	}

	protected IPreferenceStore getPreferenceStore() {
		return store;
	}

	protected IRunnableContext getRunnableContext() {
		return getContainer();
	}

	protected Group createDestinationGroup(final Composite parent) {
		Group group = new Group(parent, SWT.NONE);
		group.setLayoutData(GridDataFactory.fillDefaults().create());
		group.setText("Import Destination");
		group.setLayout(new GridLayout(3, false));
		toolkit.createLabel(group, "Add cards into");
		deckText = new Text(group, SWT.BORDER);
		deckText.setEditable(false);
		deckText.setLayoutData(GridDataFactory.fillDefaults().grab(true, false).create());
		Button browse = new Button(group, SWT.PUSH);
		browse.setText("Browse...");
		browse.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				LocationPickerDialog dialog = new LocationPickerDialog(getShell(), SWT.SINGLE) {
					@Override
					protected Control createDialogArea(Composite parent) {
						Control x = super.createDialogArea(parent);
						setMessage(
								"Select a deck or collection to add cards into,\nor select card folder to have auto-generated deck name");
						return x;
					}
				};
				dialog.setSelection(new StructuredSelection(getElement()));
				if (dialog.open() == Window.OK) {
					if (dialog.getSelection() != null && !dialog.getSelection().isEmpty()) {
						element = (CardElement) dialog.getSelection().getFirstElement();
						if (element instanceof CardCollection) {
							virtualCards.setSelection(((CardCollection) element).isVirtual());
						}
						updateImportIntoText();
					}
					updatePageCompletion();
					updateWidgetEnablements();
				}
			}
		});
		// deck options
		virtualCards = new Button(group, SWT.CHECK);
		virtualCards.setText("Imported cards will be virtual");
		virtualCards.setSelection(false);
		virtualCards.setLayoutData(GridDataFactory.fillDefaults().span(3, 1).create());
		// db import
		Hyperlink hyperlink = toolkit.createHyperlink(group,
				"Extends cards database (do not create new deck or collection)", SWT.NONE);
		hyperlink.addHyperlinkListener(new HyperlinkAdapter() {
			@Override
			public void linkActivated(HyperlinkEvent e) {
				getWizard().performCancel();
				getContainer().getShell().close();
				openWizard(new SetImportWizard(), new StructuredSelection(getElement()));
			}
		});
		hyperlink.setLayoutData(GridDataFactory.fillDefaults().span(3, 1).create());
		return group;
	}

	private int openWizard(IWorkbenchWizard wizard, final IStructuredSelection selection) {
		wizard.init(PlatformUI.getWorkbench(), selection);
		WizardDialog dialog = new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), wizard);
		dialog.create();
		dialog.getShell().setText(wizard.getWindowTitle());
		return dialog.open();
	}

	private void updateImportIntoText() {
		deckText.setText(element.getLocation().getPath());
		if (element instanceof CardOrganizer) {
			deckText.setText(element.getLocation().getPath() + "/" + AUTO_NAME);
		}
	}

	@Override
	protected boolean allowNewContainerName() {
		return true;
	}

	/**
	 * (non-Javadoc) Method declared on IDialogPage.
	 */
	@Override
	public void createControl(final Composite parent) {
		toolkit = MagicToolkit.getInstance();
		setTitle("Import into a Deck or Collection");
		initializeDialogUnits(parent);
		Composite composite = new Composite(parent, SWT.NULL);
		composite.setLayout(new GridLayout());
		composite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_FILL | GridData.HORIZONTAL_ALIGN_FILL));
		composite.setFont(parent.getFont());
		setControl(composite);
		createResourcesGroup(composite);
		createOptionsGroup(composite);
		createDestinationGroup(composite);
		restoreWidgetValues();
		updateWidgetEnablements();
		defaultPrompt();
		setPageComplete(determinePageCompletion());
		setErrorMessage(null); // should not initially have error message
		PlatformUI.getWorkbench().getHelpSystem().setHelp(composite, MagicUIActivator.PLUGIN_ID + ".export");
	}

	private void defaultPrompt() {
		String mess = "You have selected '" + reportType.getLabel() + "' format.\n";
		if (importData.getError() != null) {
			mess += "Warning: cannot parse data (" + importData.getError().getMessage() + "). ";
		} else {
			int errcount = importData.getErrorCount();
			mess += "Found " + importData.size() + " record(s) and " + errcount + " error(s).";
		}
		mess += " Press Next to preview.\n";
		if (reportType == ImportExportFactory.XML)
			setMessage(mess);
		else if (reportType == ImportExportFactory.CSV)
			setMessage(mess + "Columns: ID,NAME,COST,TYPE,P,T,TEXT,SET,RARITY,DBPRICE,LANG,COUNT,PRICE,COMMENT");
		else if (reportType == ImportExportFactory.TEXT_DECK_CLASSIC)
			setMessage(mess + "Lines like 'Quagmire Druid x 3' or 'Diabolic Tutor (Tenth Edition) x4'");
		else if (reportType == ImportExportFactory.TABLE_PIPED)
			setMessage(mess + "Columns: ID|NAME|COST|TYPE|P|T|TEXT|SET|RARITY|RESERVED|LANG|COUNT|PRICE|COMMENT");
		else
			setMessage(mess);
	}

	@Override
	protected void restoreWidgetValues() {
		super.restoreWidgetValues();
		IDialogSettings dialogSettings = MagicUIActivator.getDefault().getDialogSettings(ID);
		// restore file
		String file = dialogSettings.get(IMPUT_FILE_SETTING);
		if (file != null) {
			final String string = file;
			fileName = string;
			fileText.setText(file);
			fileText.setSelection(file.length(), file.length());
		}
		String sfrom = dialogSettings.get(FROM_CHOICE);
		inputChoice = InputChoice.CLIPBOARD;
		if (sfrom != null) {
			try {
				inputChoice = InputChoice.valueOf(sfrom);
			} catch (Exception e) {
				// ignore
			}
		}
		setInputChoice(inputChoice);
		// restore options
		String stype = dialogSettings.get(REPORT_TYPE_SETTING);
		ReportType type = ImportExportFactory.getByLabel(stype);
		if (type != null && type.getImportDelegate() != null) {
			selectReportType(type);
		} else {
			selectReportType(ImportExportFactory.TEXT_DECK_CLASSIC);
		}
		updateImportIntoText();
		updateWidgetEnablements();
	}

	public void setInputChoice(InputChoice inputChoice) {
		this.inputChoice = inputChoice;
		fileRadio.setSelection(inputChoice == InputChoice.FILE);
		clipboardRadio.setSelection(inputChoice == InputChoice.CLIPBOARD);
		inputRadio.setSelection(inputChoice == InputChoice.INPUT);
		urlRadio.setSelection(inputChoice == InputChoice.URL);
	}

	private void selectReportType(final ReportType type) {
		if (type == null)
			return;
		reportType = type;
		typeCombo.setText(type.getLabel());
		typeCombo.setToolTipText(type.getExample());
	}

	@Override
	protected void saveWidgetValues() {
		try {
			IDialogSettings dialogSettings = MagicUIActivator.getDefault().getDialogSettings(ID);
			// save file name
			dialogSettings.put(IMPUT_FILE_SETTING, fileName);
			dialogSettings.put(FROM_CHOICE, inputChoice.name());
			// save options
			dialogSettings.put(REPORT_TYPE_SETTING, reportType.getLabel());
			// save into file
			MagicUIActivator.getDefault().saveDialogSetting(dialogSettings);
		} catch (IOException e) {
			MagicUIActivator.log(e);
		}
	}

	public int getIntoChoice() {
		return 2;
	}

	protected void createResourcesGroup(final Composite parent) {
		Composite fileSelectionArea = toolkit.createGroup(parent, "Import Source");
		fileSelectionArea.setLayoutData(GridDataFactory.fillDefaults().create());
		fileSelectionArea.setLayout(GridLayoutFactory.swtDefaults().numColumns(4).create());
		// clipboard control
		clipboardRadio = toolkit.createButton(fileSelectionArea, "Clipboard", SWT.RADIO,
				(e) -> onInputChoice(e, InputChoice.CLIPBOARD));
		clipboardRadio.setLayoutData(GridDataFactory.fillDefaults().create());

		// file selector
		fileRadio = toolkit.createButton(fileSelectionArea, "File", SWT.RADIO,
				(e) -> onInputChoice(e, InputChoice.FILE));
		fileRadio.setSelection(true);
		fileText = toolkit.createText(fileSelectionArea, "", SWT.BORDER);
		fileText.addModifyListener((e) -> {
			fileName = fileText.getText();
			if (inputChoice != InputChoice.FILE) {
				setInputChoice(InputChoice.FILE);
			}
			onInputChoice(null, InputChoice.FILE);
		});
		fileText.setLayoutData(GridDataFactory.fillDefaults().hint(200, SWT.DEFAULT).grab(true, false).create());
		toolkit.createButton(fileSelectionArea, "Browse...", SWT.PUSH, (e) -> {
			FileDialog fileDialog = new FileDialog(parent.getShell());
			fileDialog.setFileName(fileText.getText());
			String file = fileDialog.open();
			if (file != null) {
				setInputChoice(InputChoice.FILE);
				fileText.setText(file);
				fileText.setSelection(file.length(), file.length());
			}
		});
		// editor controls
		inputRadio = toolkit.createButton(fileSelectionArea, "Text Input", SWT.RADIO,
				(e) -> onInputChoice(e, InputChoice.INPUT));
		inputRadio.setLayoutData(GridDataFactory.fillDefaults().create());
		// url selector
		urlRadio = toolkit.createButton(fileSelectionArea, "URL", SWT.RADIO, (e) -> onInputChoice(e, InputChoice.URL));
		urlText = toolkit.createText(fileSelectionArea, "", SWT.BORDER);
		urlText.addModifyListener((e) -> {
			urlName = urlText.getText();
			if (inputChoice != InputChoice.URL) {
				setInputChoice(InputChoice.URL);
			}
			onInputChoice(null, InputChoice.URL);
		});
		urlText.setLayoutData(GridDataFactory.fillDefaults().hint(200, SWT.DEFAULT).grab(true, false).create());
	}

	public void onInputChoice(SelectionEvent event, InputChoice choice) {
		if (event == null || ((Button) event.widget).getSelection()) {
			inputChoice = choice;
			autoDetectFormat();
			updateWidgetEnablements();
			updatePageCompletion();
		}
	}

	protected void autoDetectFormat() {
		ReportType type = null;
		switch (inputChoice) {
		case FILE:
			type = ReportType.autoDetectType(new File(fileName), types);
			break;
		case CLIPBOARD:
			type = ReportType.autoDetectType(getClipboardText(), types);
			break;
		case INPUT:
			if (importData != null) {
				String text = importData.getText();
				type = ReportType.autoDetectType(text, types);
			}
			break;
		case URL:
			break;
		default:
			break;
		}
		selectReportType(type);
		performImport(true);
	}

	@Override
	protected void createOptionsGroupButtons(final Group optionsPanel) {
		// top level group
		Composite buttonComposite = toolkit.createComposite(optionsPanel);
		buttonComposite.setLayout(GridLayoutFactory.swtDefaults().numColumns(3).create());
		// create report type
		toolkit.createLabel(buttonComposite, "Import Format:");
		typeCombo = new Combo(buttonComposite, SWT.READ_ONLY | SWT.DROP_DOWN);
		for (ReportType reportType : types) {
			typeCombo.add(reportType.getLabel());
		}
		typeCombo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				reportType = ImportExportFactory.getByLabel(typeCombo.getText());
				typeCombo.setToolTipText(reportType.getExample());
				performImport(true);
				updateWidgetEnablements();
				updatePageCompletion();
			}
		});
		typeCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		toolkit.createHyperlink(buttonComposite, "Example...", SWT.NONE).addHyperlinkListener(new HyperlinkAdapter() {
			@Override
			public void linkActivated(HyperlinkEvent e) {
				InputDialog inputDialog = new InputDialog(getShell(), "Example", reportType.getLabel(),
						reportType.getExample(), null) {
					@Override
					protected int getShellStyle() {
						return super.getShellStyle() | SWT.RESIZE;
					}

					@Override
					protected int getInputTextStyle() {
						return SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.WRAP;
					}

					@Override
					protected Control createDialogArea(Composite parent) {
						Control x = super.createDialogArea(parent);
						getText().setLayoutData(GridDataFactory.fillDefaults().hint(600, 400).create());
						return x;
					}
				};
				inputDialog.setBlockOnOpen(false);
				inputDialog.open();
			}
		});
	}

	@Override
	protected String getErrorDialogTitle() {
		return "Error";
	}

	@Override
	protected boolean validateDestinationGroup() {
		if (!importData.isOk()) {
			setErrorMessage(null);
			return false;
		}
		return true;
	}

	@Override
	public boolean canFlipToNextPage() {
		return getNextPage() != null;
	}

	@Override
	protected boolean validateOptionsGroup() {
		IImportDelegate worker = reportType.getImportDelegate();
		if (worker == null) {
			setErrorMessage("Importer is not defined for " + reportType.getLabel());
			return false;
		}
		return true;
	}

	@Override
	protected boolean validateSourceGroup() {
		if (inputChoice == InputChoice.FILE) {
			if (((fileName == null) || (fileName.length() == 0) || (fileText.getText().length() == 0))) {
				setErrorMessage("Input file is not selected");
				return false;
			}
			File file = new File(fileName);
			if (!file.exists()) {
				setErrorMessage("File does not exists");
				return false;
			}
			if (!file.isFile()) {
				setErrorMessage("Not a file");
				return false;
			}
			return true;
		}
		if (inputChoice == InputChoice.URL) {
			if (((urlName == null) || (urlName.length() == 0) || (urlText.getText().length() == 0))) {
				setErrorMessage("URL is selected by empty");
				return false;
			}
			try {
				URL url = new URL(urlName);
			} catch (MalformedURLException e) {
				setErrorMessage("Malformed URL: " + e.getMessage());
				return false;
			}
		}
		return true;
	}

	@Override
	protected void updatePageCompletion() {
		super.updatePageCompletion();
		if (isPageComplete() || getErrorMessage() == null) {
			defaultPrompt(); // set default prompt, otherwise it empty ugly
		}
	}

	@Override
	protected void updateWidgetEnablements() {
		fileText.setEnabled(inputChoice == InputChoice.FILE);
		urlText.setEnabled(inputChoice == InputChoice.URL);
	}

	public ReportType getReportType() {
		return reportType;
	}

	public CardElement getElement() {
		return element;
	}

	public ImportData getImportData() {
		return importData;
	}

	public InputChoice getInputChoice() {
		return inputChoice;
	}

	public void importRunnable(final boolean preview, final boolean dbImport, IProgressMonitor monitor)
			throws InvocationTargetException {
		monitor.beginTask("Importing", 100);
		try {
			readSource();
			monitor.worked(10);
			IImportDelegate worker = reportType.getImportDelegate();
			if (worker == null)
				throw new IllegalArgumentException("Importer is not defined for " + reportType.getLabel());
			boolean resolve = !dbImport;
			if (preview) {
				monitor.worked(10);
				// if error occurs importResult.error would be set
				// to exception
				ImportUtils.performPreImport(worker, importData, CoreMonitorAdapter.submon(monitor, 50));
				if (!dbImport) {
					ImportUtils.resolve(importData.getList());
				} else {
					ImportUtils.performPreImportWithDb((Collection<IMagicCard>) importData.getList(), new ArrayList<>(),
							importData.getFields());
				}
				monitor.worked(10);
			} else {
				if (!importData.isOk()) {
					ImportUtils.performPreImport(worker, importData, CoreMonitorAdapter.submon(monitor, 50));
				}
				if (importData.isOk()) {
					Collection<IMagicCard> result = (Collection<IMagicCard>) importData.getList();
					if (resolve) {
						ImportUtils.resolve(importData.getList());
						if (element instanceof CollectionsContainer) {
							createNewDeck(getNewDeckName(), importData.isVirtual(), (CollectionsContainer) element);
						}
						if (!(element instanceof CardCollection)) {
							throw new IllegalArgumentException("Cannot import into " + element);
						}
						Location location = getSelectedLocation();
						importData.setLocation(location);
						ImportUtils.updateLocation(result, location);
						monitor.worked(10);
					}
					if (fixErrors(result, dbImport)) {
						monitor.worked(10);
						if (resolve)
							ImportUtils.performImport(result, DataManager.getCardHandler().getLibraryCardStore());
					}
				}
			}
		} catch (InvocationTargetException e) {
			throw e;
		} catch (Exception e) {
			throw new InvocationTargetException(e);
		} finally {
			monitor.done();
		}
		if (importData.isOk())
			return;
		if (importData.getError() != null)
			throw new InvocationTargetException(importData.getError());
		else
			throw new InvocationTargetException(new IllegalArgumentException("Cannot import"));
	}

	@Override
	public void setVisible(boolean visible) {
		if (visible)
			updatePageCompletion();
		super.setVisible(visible);
	}
}
